

.. _sphx_glr_intro_summary-exercises_auto_examples_plot_gumbell_wind_speed_prediction.py:


The Gumbell distribution
=========================

Generate the exercise results on the Gumbell distribution




.. image:: /intro/summary-exercises/auto_examples/images/sphx_glr_plot_gumbell_wind_speed_prediction_001.png
    :align: center





.. code-block:: python

    import numpy as np
    from scipy.interpolate import UnivariateSpline
    import pylab as pl


    def gumbell_dist(arr):
        return -np.log(-np.log(arr))

    years_nb = 21
    wspeeds = np.load('sprog-windspeeds.npy')
    max_speeds = np.array([arr.max() for arr in np.array_split(wspeeds, years_nb)])
    sorted_max_speeds = np.sort(max_speeds)

    cprob = (np.arange(years_nb, dtype=np.float32) + 1)/(years_nb + 1)
    gprob = gumbell_dist(cprob)
    speed_spline = UnivariateSpline(gprob, sorted_max_speeds, k=1)
    nprob = gumbell_dist(np.linspace(1e-3, 1-1e-3, 1e2))
    fitted_max_speeds = speed_spline(nprob)

    fifty_prob = gumbell_dist(49./50.)
    fifty_wind = speed_spline(fifty_prob)

    pl.figure()
    pl.plot(sorted_max_speeds, gprob, 'o')
    pl.plot(fitted_max_speeds, nprob, 'g--')
    pl.plot([fifty_wind], [fifty_prob], 'o', ms=8., mfc='y', mec='y')
    pl.plot([fifty_wind, fifty_wind], [pl.axis()[2], fifty_prob], 'k--')
    pl.text(35, -1, r'$V_{50} = %.2f \, m/s$' % fifty_wind)
    pl.xlabel('Annual wind speed maxima [$m/s$]')
    pl.ylabel('Gumbell cumulative probability')
    pl.show()

**Total running time of the script:**
(0 minutes 0.038 seconds)



.. container:: sphx-glr-download

    :download:`Download Python source code: plot_gumbell_wind_speed_prediction.py <plot_gumbell_wind_speed_prediction.py>`


.. container:: sphx-glr-download

    :download:`Download Jupyter notebook: plot_gumbell_wind_speed_prediction.ipynb <plot_gumbell_wind_speed_prediction.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
